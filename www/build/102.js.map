{"version":3,"sources":["../../src/container/job-descripition/job-descripition.module.ts","../../src/container/job-descripition/job-descripition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACS;AAUzD;IAAA;IAAwC,CAAC;IAA5B,yBAAyB;QARrC,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,8EAAmB;aACpB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,8EAAmB,CAAC;aAC9C;SACF,CAAC;OACW,yBAAyB,CAAG;IAAD,gCAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACZI;AACkC;AACM;AAC1C;AACJ;AAOpC;IAQE,6BAAoB,OAAsB,EAAU,SAAoB,EAAU,OAAwB,EAAU,KAAgC,EAAU,WAA8B;QAAxK,YAAO,GAAP,OAAO,CAAe;QAAU,cAAS,GAAT,SAAS,CAAW;QAAU,YAAO,GAAP,OAAO,CAAiB;QAAU,UAAK,GAAL,KAAK,CAA2B;QAAU,gBAAW,GAAX,WAAW,CAAmB;QAL5L,uBAAkB,GAAW,EAAE,CAAC;QAM9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC;QAExD,IAAI,MAAM,GAAG,IAAI,SAAS,EAAE,CAAC;QAE7B,IAAI,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;IAClF,CAAC;IACD,4CAAc,GAAd;IAEA,CAAC;IAED,oDAAsB,GAAtB;QACE,kDAAkD;QAClD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACxE,CAAC;IACD,qCAAO,GAAP;QAAA,iBAqBC;QAlBC,IAAI,MAAM,GAAG,EAAE;QAEf,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,2EAAiC,CAAC,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;QAE5F,OAAO,IAAI,OAAO,CAAC,iBAAO;YACxB,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,KAAK;iBAC/B,MAAM,CAAM,gFAAoC,CAAC;iBACjD,SAAS,CACR,kBAAQ;gBACN,IAAI,QAAQ,CAAC,OAAO,IAAI,KAAK,EAAE;oBAC7B,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;oBAC7B,OAAO,EAAE,CAAC;iBACX;YACH,CAAC,EACD,aAAG;YACH,CAAC,CACF,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC;IACD,4CAAc,GAAd,UAAe,OAAO;QAEpB,IAAI,OAAO,GAAG,IAAI;aACf,WAAW;aACX,MAAM,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,oCAAM,GAAN;QACE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;IACrB,CAAC;IAzDU,mBAAmB;QAJ/B,gEAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;WACG;SACrC,CAAC;4BAS4L;OARjL,mBAAmB,CA0D/B;IAAD,CAAC;AAAA;SA1DY,mBAAmB,gB","file":"102.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { JobDescripitionPage } from './job-descripition';\n\n@NgModule({\n  declarations: [\n    JobDescripitionPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(JobDescripitionPage),\n  ],\n})\nexport class JobDescripitionPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/job-descripition/job-descripition.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, PopoverController } from 'ionic-angular';\nimport { CommonUtilities } from '../../providers/commonUtilities/commonUtilities';\nimport * as fromStore from \"@app/store\";\nimport { Store } from '@ngrx/store';\n\n@IonicPage()\n@Component({\n  selector: 'page-job-descripition',\n  templateUrl: 'job-descripition.html',\n})\nexport class JobDescripitionPage {\n\n  selectedJob: any;\n  jobDescripitionUrl: string = \"\";\n  _jobDescripition: any;\n  jobDesc: any;\n  applybutton: boolean;\n\n  constructor(private navCtrl: NavController, private navParams: NavParams, private utility: CommonUtilities, private store: Store<fromStore.AppState>, private popoverCtrl: PopoverController) {\n    this.selectedJob = this.navParams.get('selectedJob');\n    this.applybutton = this.navParams.get('showApplyButton')\n\n    let parser = new DOMParser();\n\n    let data = parser.parseFromString(this.selectedJob.jobDescription, 'text/html');\n  }\n  ionViewDidLoad() {\n\n  }\n\n  gotoJobDescriptionPage() {\n    //this.utility.openWithBrowser(Constants.IJP_URL);\n    this.navCtrl.push(\"ApplyjobPage\", { 'jobDetails': this.selectedJob });\n  }\n  getData() {\n\n\n    let params = {}\n\n    this.store.dispatch(new fromStore.GetJobDescriptionAction(this.jobDescripitionUrl, params));\n\n    return new Promise(resolve => {\n      this._jobDescripition = this.store\n        .select<any>(fromStore.getInternalJobPostingState)\n        .subscribe(\n          response => {\n            if (response.pending == false) {\n              this.jobDesc = response.data;\n              resolve();\n            }\n          },\n          err => {\n          }\n        );\n    });\n  }\n  presentOptions(myEvent) {\n\n    let popover = this\n      .popoverCtrl\n      .create('PopoverPage', { 'type': 'others' });\n\n    popover.present({ ev: myEvent });\n  }\n\n  goBack() {\n    this.navCtrl.pop();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/job-descripition/job-descripition.ts"],"sourceRoot":""}