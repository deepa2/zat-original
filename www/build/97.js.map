{"version":3,"sources":["../../src/container/notification/notification.module.ts","../../src/container/notification/notification.ts"],"names":[],"mappings":"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","file":"97.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ComponentsModule } from '../../components/components.module';\nimport { NotificationPage } from './notification';\n\n@NgModule({\n  declarations: [\n    NotificationPage,\n  ],\n  imports: [\n    ComponentsModule,\n    IonicPageModule.forChild(NotificationPage),\n  ],\n})\nexport class NotificationPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/notification/notification.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, LoadingController, AlertController, Loading } from 'ionic-angular';\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\nimport { Store } from \"@ngrx/store\";\nimport * as fromStore from '../../store';\nimport { Observable } from \"rxjs\";\nimport { Subscription } from 'rxjs/Subscription';\nimport { searchService } from '../../providers/services/searchService/searchService';\nimport { Data } from '../../providers/data/data';\nimport { CommonUtilities } from '../../providers/commonUtilities/commonUtilities'\n\n@IonicPage()\n@Component({\n  selector: 'page-notification',\n  templateUrl: 'notification.html',\n})\nexport class NotificationPage {\n\n  private notificationList$: Observable<any>;\n  private loading$: Observable<any>;\n  private end: number = 10;\n  private start: number = 0;\n  private itemsLength: number = 0;\n  private type: string = 'notification';\n  private totalResultCount: number = 0;\n  private notificationCount: number;\n  private clearAll: FormGroup;\n  private role: any;\n  private notificationType: any;\n  private selectedRole: any;\n  private filterArray: Array<any> = [];\n  private pageTitle: string;\n\n\n  private _notificationListener: Subscription = new Subscription();\n  private _readAllnotificationListener: Subscription = new Subscription();\n  private _roleListener: Subscription = new Subscription();\n\n  constructor(private navCtrl: NavController, private navParams: NavParams, private alertCtrl: AlertController, private dataService: Data,\n    private store: Store<fromStore.AppState>, private loadingController: LoadingController, private searchService: searchService, private utils: CommonUtilities) {\n  }\n\n  ionViewDidLoad() {\n\n    this.notificationType = this.navParams.get('notificationType');\n\n    this._roleListener = this.store.select<any>(fromStore.getRole).subscribe((role) => {\n      this.role = role;\n    });\n\n    this.getNotificationData('get');\n    this.loading$ = this.store.select<any>(fromStore.getNotificationLoading);\n\n    this.getNotificationCount();\n  }\n\n  getNotificationData(type: string) {\n    let params = {\n      'end': this.end,\n      'start': this.start,\n      'role': this.role,\n      'type': this.notificationType\n    }\n    let url = \"getAllNotification\";\n\n    if (type == \"get\") {\n      this.store.dispatch(new fromStore.GetNotificationAction(url, params));\n    } else if (type == 'update') {\n      this.store.dispatch(new fromStore.UpdateNotificationAction(url, params));\n    }\n    else if (type == 'refresh') {\n      this.store.dispatch(new fromStore.ReloadNotificationAction(url, params));\n    }\n\n    return new Promise(resolve => {\n      this._notificationListener = this.store.select<any>(fromStore.getNotificationState).subscribe(response => {\n        if (response.pending == false && response.loadMore == false && response.pullToRefresh == false) {\n          if (response.data != undefined && response.data != null) {\n            this.notificationList$ = response.data;\n            this.totalResultCount = response.totalResults;\n            this.itemsLength = response.data.length;\n          }\n\n          resolve();\n        }\n      }, err => {\n      })\n    })\n  }\n\n\n  readAll() {\n\n\n\n    this.store.dispatch(new fromStore.ClearAllCountAction);\n\n    this.notificationList$.map(item => {\n      if (!item.isRead) {\n        item.isRead = true;\n      }\n    })\n\n    /* let url = \"readAllNotification\";\n\n    this.store.dispatch(new fromStore.ReadAllNotificationAction(url)); */\n\n    let url = \"readAllNotification\";\n\n    this.store.select<any>(fromStore.getCurrentModule).subscribe(response => {\n      if (response) {\n        let moduleName = {\n          \"type\": response\n        }\n        this.store.dispatch(new fromStore.ReadAllNotificationAction(url, moduleName));\n      }\n\n    })\n\n    return new Promise(resolve => {\n\n      this._readAllnotificationListener = this.store.select<any>(fromStore.getNotificationState).subscribe(response => {\n        if (response) {\n          this.notificationList$.map(item => {\n            if (!item.isRead) {\n\n              item.isRead = true;\n            }\n          })\n\n          resolve();\n        }\n\n      }, err => {\n      })\n\n    })\n\n  }\n\n  doRefresh(refresher: any) {\n\n    this.start = 0;\n\n    this.getNotificationData('refresh').then(() => {\n      refresher.complete();\n    });\n\n  }\n\n  doInfinite(infiniteScroll) {\n\n    if (this.totalResultCount) {\n      this.start = this.itemsLength;\n      this.getNotificationData('update').then(() => {\n        infiniteScroll.complete();\n      });\n    } else {\n      infiniteScroll.complete();\n    }\n\n\n  }\n\n  getNotificationCount() {\n    /* this._notificationListener = this.store.select<any>(fromStore.getMiscData).subscribe((res) => {\n      this.notificationCount = res.myUnreadNotificationCount;\n    }); */\n    this._notificationListener = this.store.select<any>(fromStore.getNotificationCount).subscribe((res) => {\n      this.notificationCount = res;\n    });\n\n  }\n\n  ionViewWillLeave() {\n    this._notificationListener.unsubscribe();\n    this._readAllnotificationListener.unsubscribe();\n    this._roleListener.unsubscribe();\n  }\n\n  gotToListDetail(detailInfo, type) {\n\n    if (detailInfo.conversationTypeName != \"BROADCAST\") {\n\n      let id = detailInfo.questionId || detailInfo.entityId || detailInfo.conversationId || detailInfo.role;\n\n\n      if (this.role == detailInfo.role) {\n        this.readNotificationOnTap(detailInfo);\n        this.navCtrl.push('DetailPage', {\n          'id': id\n        });\n\n      }\n      else {\n        //detailInfo.isRead=false;\n        let alert = this.alertCtrl.create({\n          message: 'Do you want to change role to ' + detailInfo.role + ' ?  ',\n          enableBackdropDismiss: false,\n          buttons: [\n            {\n              text: 'No',\n              role: 'no',\n              handler: () => {\n                // this.navCtrl.pop();\n\n\n              }\n            },\n            {\n              text: 'Yes',\n              handler: () => {\n\n                //Setting role to admin start\n\n                this.dataService.saveData('role', detailInfo.role);\n                this.setRole(detailInfo.role)\n\n                //read notification\n                this.readNotificationOnTap(detailInfo);\n\n                //Setting role to admin end                \n                this.navCtrl.push('DetailPage', {\n                  'id': id\n                });\n              }\n            }\n          ],\n        });\n        alert.present();\n      }\n\n    }\n\n    else {\n      // this.pageTitle =\"Announcement\";    \n      this.readNotificationOnTap(detailInfo);\n      this.utils.goToPageDetail('AnnouncementPage', '','');\n\n    }\n\n  }\n\n  setRole(role) {\n\n    this.store.dispatch(new fromStore.SetRole(role));\n  }\n\n  readNotificationOnTap(item: any) {\n\n    if (!item.isRead) {\n\n      this.store.dispatch(new fromStore.ReduceNotificationCountAction);\n\n      let param = {\n        'notificationId': item.notificationId\n      }\n      let url = \"readNotification\";\n\n      this.store.dispatch(new fromStore.ReadNotificationAction(url, param));\n\n      this.store.select<any>(fromStore.getNotificationState).subscribe(response => {\n        if (response || response.status.statusCode == 1) {\n          item.isRead = true; //read the notification\n        }\n      }, err => {\n      })\n    }\n  }\n\n  // readAnnNotificationCount(){\n\n  // }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/notification/notification.ts"],"sourceRoot":""}