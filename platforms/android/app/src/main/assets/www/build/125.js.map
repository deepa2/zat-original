{"version":3,"sources":["../../src/container/ZenLearn/selected-courses/selected-courses.module.ts","../../src/container/ZenLearn/selected-courses/selected-courses.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACS;AAUzD;IAAA;IAAwC,CAAC;IAA5B,yBAAyB;QARrC,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,8EAAmB;aACpB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,8EAAmB,CAAC;aAC9C;SACF,CAAC;OACW,yBAAyB,CAAG;IAAD,gCAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;ACZI;AACe;AACG;AACyB;AAErF;;;;;GAKG;AAOH;IAQE,6BAAmB,OAAsB,EAAS,SAAoB,EAAU,IAAkB,EAAU,KAAsB;QAA/G,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAU,SAAI,GAAJ,IAAI,CAAc;QAAU,UAAK,GAAL,KAAK,CAAiB;QAN1H,mBAAc,GAAe,EAAE;QAOrC,yCAAyC;QACzC,0CAA0C;QAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC;IAE1C,CAAC;IAED,4CAAc,GAAd;QAAA,iBAiCC;QAhCC,oDAAoD;QACpD,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;SACjD;aAAM,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;YAC1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;SAClD;aAAM,IAAI,IAAI,CAAC,KAAK,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC;YAC7B,IAAI,KAAK,GAAG;gBACV,GAAG,EAAE,kBAAkB;gBACvB,IAAI,EAAE;oBACJ,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;oBACzB,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;oBACvC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM;iBAE5B;gBACD,QAAQ,EAAE,IAAI;aACf;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,QAAa;gBAC1D,uBAAuB;gBACvB,IAAI,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE;oBAChC,KAAI,CAAC,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,CAAC;iBACrD;gBACD,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,EACC,eAAK;gBACH,qBAAqB;gBACrB,KAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC,CAAC;SAEL;IAEH,CAAC;IAhDU,mBAAmB;QAJ/B,gEAAS,CAAC;YACT,QAAQ,EAAE,uBAAuB;WACG;SACrC,CAAC;4BASkI;OARvH,mBAAmB,CAkD/B;IAAD,CAAC;AAAA;SAlDY,mBAAmB,gB","file":"125.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SelectedCoursesPage } from './selected-courses';\n\n@NgModule({\n  declarations: [\n    SelectedCoursesPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(SelectedCoursesPage),\n  ],\n})\nexport class SelectedCoursesPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/ZenLearn/selected-courses/selected-courses.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { HttpProvider } from '../../../providers/http/http';\nimport { CommonUtilities } from '../../../providers/commonUtilities/commonUtilities';\n\n/**\n * Generated class for the SelectedCoursesPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-selected-courses',\n  templateUrl: 'selected-courses.html',\n})\nexport class SelectedCoursesPage {\n\n  private dapCoursesList: Array<any> = []\n  private dapId: any;\n  private userId: any;\n  private otherList: any;\n\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, private http: HttpProvider, private utils: CommonUtilities) {\n    //console.log(this.navParams.get(\"data\"))\n    //console.log(this.navParams.get(\"dapId\"))\n    this.dapId = this.navParams.get(\"dapId\")\n\n  }\n\n  ionViewDidLoad() {\n    //console.log('ionViewDidLoad SelectedCoursesPage');\n    if (this.navParams.get(\"data\")) {\n      this.dapCoursesList = this.navParams.get(\"data\")\n    } else if (this.navParams.get(\"otherList\")) {\n      this.otherList = this.navParams.get(\"otherList\");\n    } else if (this.dapId) {\n      this.utils.updateLoader(true)\n      let param = {\n        url: \"getAddedPrograms\",\n        data: {\n          \"dapId\": this.dapId.dapId,\n          \"dapSectionId\": this.dapId.dapSectionId,\n          'userId': this.dapId.userId\n\n        },\n        zenLearn: true\n      }\n\n      this.http.http.commonService(param).subscribe((response: any) => {\n        //console.log(response)\n        if (response && response.details) {\n          this.dapCoursesList = response.details.responseList;\n        }\n        this.utils.updateLoader(false);\n      },\n        error => {\n          //console.log(error);\n          this.utils.updateLoader(false);\n        })\n\n    }\n\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/container/ZenLearn/selected-courses/selected-courses.ts"],"sourceRoot":""}